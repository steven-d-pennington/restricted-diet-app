/**
 * Emergency Card Viewer Component
 * LIFE CRITICAL: Optimized viewer for emergency situations with QR codes and sharing
 * 
 * This component is designed for first responder access and emergency situations.
 * It provides maximum visibility and access to critical medical information.
 */

import React, { useState, useRef } from 'react'
import { 
  View, 
  Text, 
  ScrollView, 
  Pressable, 
  Alert, 
  Image, 
  Dimensions, 
  Share,
  Linking
} from 'react-native'
import { EmergencyCard } from '../../types/database.types'
import { SafetyButton } from '../SafetyButton'
import { getAccessibilityProps } from '../../utils/designSystem'

interface EmergencyCardViewerProps {
  card: EmergencyCard
  onClose: () => void
  onEdit?: () => void
  onGenerateQR?: () => Promise<string | null>
  onShare?: () => void
  onCall?: (phoneNumber: string, contactName?: string) => void
  compactMode?: boolean
}

export const EmergencyCardViewer: React.FC<EmergencyCardViewerProps> = ({
  card,
  onClose,
  onEdit,
  onGenerateQR,
  onShare,
  onCall,
  compactMode = false,
}) => {
  const [qrCodeUrl, setQrCodeUrl] = useState<string | null>(card.qr_code_url)
  const [generatingQR, setGeneratingQR] = useState(false)
  const [viewMode, setViewMode] = useState<'normal' | 'emergency'>('normal')
  const scrollViewRef = useRef<ScrollView>(null)

  const isLifeThreatening = card.severity_level === 'life_threatening'
  const isCritical = isLifeThreatening || card.severity_level === 'severe'

  const handleGenerateQR = async () => {
    if (onGenerateQR) {
      setGeneratingQR(true)
      try {
        const qrUrl = await onGenerateQR()
        if (qrUrl) {
          setQrCodeUrl(qrUrl)
        }
      } catch (error) {
        Alert.alert('Error', 'Failed to generate QR code')
      } finally {
        setGeneratingQR(false)
      }
    }
  }

  const handleCall = (phoneNumber: string, contactName?: string) => {
    if (onCall) {
      onCall(phoneNumber, contactName)
    } else {
      // Fallback to direct phone call
      const phoneUrl = `tel:${phoneNumber.replace(/[^0-9+]/g, '')}`
      Linking.openURL(phoneUrl)
    }
  }

  const handleShare = async () => {
    if (onShare) {
      onShare()
    } else {
      // Default share functionality
      try {
        const shareText = `Emergency Medical Information\n\n` +
          `Name: ${card.card_name}\n` +
          `Allergies: ${card.restrictions_summary}\n` +
          `Severity: ${card.severity_level.replace('_', ' ').toUpperCase()}\n\n` +
          `Emergency Instructions:\n${card.emergency_instructions}\n\n` +
          (card.emergency_contact_1_phone ? 
            `Emergency Contact: ${card.emergency_contact_1_name || 'Primary Contact'} - ${card.emergency_contact_1_phone}\n` : '') +
          (card.doctor_phone ? 
            `Doctor: ${card.doctor_name || 'Primary Doctor'} - ${card.doctor_phone}\n` : '') +
          `\nGenerated by Restricted Diet App`

        await Share.share({
          message: shareText,
          title: `Emergency Card: ${card.card_name}`
        })
      } catch (error) {
        Alert.alert('Error', 'Failed to share emergency card')
      }
    }
  }

  const toggleEmergencyMode = () => {
    setViewMode(viewMode === 'emergency' ? 'normal' : 'emergency')
  }

  // Emergency mode rendering for first responders
  if (viewMode === 'emergency') {
    return (
      <View className="flex-1 bg-red-600">
        <ScrollView className="flex-1" showsVerticalScrollIndicator={false}>
          {/* Emergency Header */}
          <View className="bg-red-800 px-4 py-6">
            <View className="flex-row items-center justify-between mb-4">
              <View className="flex-row items-center">
                <Text className="text-6xl mr-4">üö®</Text>
                <View>
                  <Text className="text-white text-2xl font-bold">MEDICAL EMERGENCY</Text>
                  <Text className="text-red-100 text-lg">Life-Threatening Allergies</Text>
                </View>
              </View>
              
              <Pressable
                onPress={toggleEmergencyMode}
                className="bg-black bg-opacity-30 px-3 py-2 rounded-lg"
                {...getAccessibilityProps('Exit emergency mode', '', 'button')}
              >
                <Text className="text-white font-bold">EXIT</Text>
              </Pressable>
            </View>
          </View>

          {/* Patient Information */}
          <View className="p-6">
            <View className="bg-white rounded-xl p-6 mb-4">
              <Text className="text-red-800 text-xl font-bold mb-2 text-center">PATIENT</Text>
              <Text className="text-black text-3xl font-bold text-center">
                {card.card_name.replace('Emergency Card - ', '').toUpperCase()}
              </Text>
            </View>

            {/* Critical Allergies */}
            <View className="bg-yellow-400 rounded-xl p-6 mb-4">
              <Text className="text-black text-xl font-bold mb-3">‚ö†Ô∏è SEVERE ALLERGIES</Text>
              <Text className="text-black text-2xl font-bold leading-tight">
                {card.restrictions_summary.replace('Severe allergies: ', '').toUpperCase()}
              </Text>
            </View>

            {/* Emergency Instructions */}
            <View className="bg-white rounded-xl p-6 mb-4">
              <Text className="text-red-800 text-xl font-bold mb-3">EMERGENCY INSTRUCTIONS</Text>
              <Text className="text-black text-lg font-medium leading-relaxed">
                {card.emergency_instructions}
              </Text>
            </View>

            {/* Critical Contact Information */}
            <View className="flex-row mb-4">
              {card.emergency_contact_1_phone && (
                <View className="flex-1 mr-2">
                  <Pressable
                    onPress={() => handleCall(card.emergency_contact_1_phone!, card.emergency_contact_1_name || undefined)}
                    className="bg-green-600 rounded-xl p-4 items-center"
                    {...getAccessibilityProps('Call emergency contact', '', 'button')}
                  >
                    <Text className="text-white text-lg font-bold mb-1">üìû CALL</Text>
                    <Text className="text-white text-sm font-bold text-center">
                      {card.emergency_contact_1_name || 'EMERGENCY'}
                    </Text>
                    <Text className="text-white text-base font-bold">
                      {card.emergency_contact_1_phone}
                    </Text>
                  </Pressable>
                </View>
              )}

              {card.doctor_phone && (
                <View className="flex-1 ml-2">
                  <Pressable
                    onPress={() => handleCall(card.doctor_phone!, card.doctor_name || undefined)}
                    className="bg-blue-600 rounded-xl p-4 items-center"
                    {...getAccessibilityProps('Call doctor', '', 'button')}
                  >
                    <Text className="text-white text-lg font-bold mb-1">üè• DOCTOR</Text>
                    <Text className="text-white text-sm font-bold text-center">
                      {card.doctor_name || 'PHYSICIAN'}
                    </Text>
                    <Text className="text-white text-base font-bold">
                      {card.doctor_phone}
                    </Text>
                  </Pressable>
                </View>
              )}
            </View>

            {/* Medications */}
            {card.medications && card.medications.length > 0 && (
              <View className="bg-white rounded-xl p-6 mb-4">
                <Text className="text-red-800 text-xl font-bold mb-3">üíä MEDICATIONS ON HAND</Text>
                {card.medications.map((med, index) => (
                  <Text key={index} className="text-black text-lg font-bold leading-tight">
                    ‚Ä¢ {med.toUpperCase()}
                  </Text>
                ))}
              </View>
            )}

            {/* Insurance Information */}
            {card.insurance_info && (
              <View className="bg-white rounded-xl p-6 mb-4">
                <Text className="text-red-800 text-xl font-bold mb-3">üè• INSURANCE</Text>
                <Text className="text-black text-lg font-medium">{card.insurance_info}</Text>
              </View>
            )}

            {/* Emergency Actions */}
            <View className="flex-row justify-around mt-6">
              <Pressable
                onPress={() => handleCall('911')}
                className="bg-red-800 rounded-xl px-6 py-4 items-center flex-1 mr-2"
                {...getAccessibilityProps('Call 911', '', 'button')}
              >
                <Text className="text-white text-2xl mb-1">üöë</Text>
                <Text className="text-white text-lg font-bold">CALL 911</Text>
              </Pressable>

              <Pressable
                onPress={handleShare}
                className="bg-purple-600 rounded-xl px-6 py-4 items-center flex-1 ml-2"
                {...getAccessibilityProps('Share emergency information', '', 'button')}
              >
                <Text className="text-white text-2xl mb-1">üì§</Text>
                <Text className="text-white text-lg font-bold">SHARE INFO</Text>
              </Pressable>
            </View>
          </View>
        </ScrollView>
      </View>
    )
  }

  // Normal viewing mode
  const cardBgColor = isCritical 
    ? isLifeThreatening ? 'bg-red-50' : 'bg-orange-50'
    : 'bg-white'

  return (
    <View className="flex-1 bg-white">
      {/* Header */}
      <View className={`${isCritical ? 'bg-red-600' : 'bg-blue-600'} px-4 py-3 ${compactMode ? 'pb-2' : ''}`}>
        <View className="flex-row items-center justify-between">
          <View className="flex-row items-center flex-1">
            <Text className="text-3xl mr-3">
              {isLifeThreatening ? 'üö®' : isCritical ? '‚ö†Ô∏è' : 'üìã'}
            </Text>
            <View className="flex-1">
              <Text className="text-white text-lg font-bold" numberOfLines={2}>
                {card.card_name}
              </Text>
              <Text className="text-white text-sm opacity-90">
                {card.severity_level.replace('_', ' ').toUpperCase()}
              </Text>
            </View>
          </View>

          <View className="flex-row">
            {isCritical && (
              <Pressable
                onPress={toggleEmergencyMode}
                className="bg-red-800 px-3 py-2 rounded-lg mr-2"
                {...getAccessibilityProps('Switch to emergency mode', '', 'button')}
              >
                <Text className="text-white font-bold text-xs">EMERGENCY</Text>
              </Pressable>
            )}
            
            <Pressable
              onPress={onClose}
              className="bg-black bg-opacity-30 px-3 py-2 rounded-lg"
              {...getAccessibilityProps('Close emergency card', '', 'button')}
            >
              <Text className="text-white font-bold">‚úï</Text>
            </Pressable>
          </View>
        </View>
      </View>

      <ScrollView 
        ref={scrollViewRef}
        className="flex-1" 
        showsVerticalScrollIndicator={false}
        contentContainerStyle={{ padding: 16 }}
      >
        {/* Restrictions Summary */}
        <View className={`${cardBgColor} border-2 ${isCritical ? 'border-red-300' : 'border-gray-200'} rounded-lg p-4 mb-4`}>
          <Text className={`${isCritical ? 'text-red-800' : 'text-gray-800'} text-lg font-bold mb-2`}>
            Medical Restrictions
          </Text>
          <Text className={`${isCritical ? 'text-red-700' : 'text-gray-700'} text-xl leading-relaxed`}>
            {card.restrictions_summary}
          </Text>
        </View>

        {/* Emergency Instructions */}
        <View className="bg-yellow-50 border-2 border-yellow-300 rounded-lg p-4 mb-4">
          <Text className="text-yellow-800 text-lg font-bold mb-2">‚ö†Ô∏è Emergency Instructions</Text>
          <Text className="text-yellow-700 text-base leading-relaxed">
            {card.emergency_instructions}
          </Text>
        </View>

        {/* Medications */}
        {card.medications && card.medications.length > 0 && (
          <View className="bg-blue-50 border-2 border-blue-300 rounded-lg p-4 mb-4">
            <Text className="text-blue-800 text-lg font-bold mb-3">üíä Medications</Text>
            {card.medications.map((med, index) => (
              <View key={index} className="flex-row items-center mb-2">
                <Text className="text-blue-700 text-lg font-semibold">‚Ä¢ {med}</Text>
              </View>
            ))}
          </View>
        )}

        {/* Emergency Contacts */}
        {(card.emergency_contact_1_phone || card.emergency_contact_2_phone) && (
          <View className="bg-green-50 border-2 border-green-300 rounded-lg p-4 mb-4">
            <Text className="text-green-800 text-lg font-bold mb-3">üìû Emergency Contacts</Text>
            
            {/* Primary Contact */}
            {card.emergency_contact_1_phone && (
              <View className="bg-white rounded-lg p-3 mb-3">
                <View className="flex-row items-center justify-between">
                  <View className="flex-1">
                    <Text className="text-green-800 font-bold text-base">
                      {card.emergency_contact_1_name || 'Primary Contact'}
                    </Text>
                    <Text className="text-green-700 text-base">
                      {card.emergency_contact_1_phone}
                    </Text>
                    {card.emergency_contact_1_relationship && (
                      <Text className="text-green-600 text-sm">
                        {card.emergency_contact_1_relationship}
                      </Text>
                    )}
                  </View>
                  <Pressable
                    onPress={() => handleCall(card.emergency_contact_1_phone!, card.emergency_contact_1_name || undefined)}
                    className="bg-green-600 px-4 py-2 rounded-lg"
                    {...getAccessibilityProps('Call primary contact', '', 'button')}
                  >
                    <Text className="text-white font-bold">CALL</Text>
                  </Pressable>
                </View>
              </View>
            )}

            {/* Secondary Contact */}
            {card.emergency_contact_2_phone && (
              <View className="bg-white rounded-lg p-3">
                <View className="flex-row items-center justify-between">
                  <View className="flex-1">
                    <Text className="text-green-800 font-bold text-base">
                      {card.emergency_contact_2_name || 'Secondary Contact'}
                    </Text>
                    <Text className="text-green-700 text-base">
                      {card.emergency_contact_2_phone}
                    </Text>
                    {card.emergency_contact_2_relationship && (
                      <Text className="text-green-600 text-sm">
                        {card.emergency_contact_2_relationship}
                      </Text>
                    )}
                  </View>
                  <Pressable
                    onPress={() => handleCall(card.emergency_contact_2_phone!, card.emergency_contact_2_name || undefined)}
                    className="bg-green-600 px-4 py-2 rounded-lg"
                    {...getAccessibilityProps('Call secondary contact', '', 'button')}
                  >
                    <Text className="text-white font-bold">CALL</Text>
                  </Pressable>
                </View>
              </View>
            )}
          </View>
        )}

        {/* Medical Information */}
        {(card.doctor_name || card.doctor_phone || card.insurance_info) && (
          <View className="bg-purple-50 border-2 border-purple-300 rounded-lg p-4 mb-4">
            <Text className="text-purple-800 text-lg font-bold mb-3">üè• Medical Information</Text>
            
            {/* Doctor */}
            {(card.doctor_name || card.doctor_phone) && (
              <View className="bg-white rounded-lg p-3 mb-3">
                <Text className="text-purple-800 font-semibold text-sm mb-1">Primary Doctor</Text>
                {card.doctor_name && (
                  <Text className="text-purple-700 text-base font-medium">{card.doctor_name}</Text>
                )}
                {card.doctor_phone && (
                  <View className="flex-row items-center justify-between mt-1">
                    <Text className="text-purple-700 text-base">{card.doctor_phone}</Text>
                    <Pressable
                      onPress={() => handleCall(card.doctor_phone!, card.doctor_name || undefined)}
                      className="bg-purple-600 px-3 py-1 rounded"
                      {...getAccessibilityProps('Call doctor', '', 'button')}
                    >
                      <Text className="text-white font-bold text-sm">CALL</Text>
                    </Pressable>
                  </View>
                )}
              </View>
            )}

            {/* Insurance */}
            {card.insurance_info && (
              <View className="bg-white rounded-lg p-3">
                <Text className="text-purple-800 font-semibold text-sm mb-1">Insurance Information</Text>
                <Text className="text-purple-700 text-base">{card.insurance_info}</Text>
              </View>
            )}
          </View>
        )}

        {/* Additional Notes */}
        {card.additional_notes && (
          <View className="bg-gray-50 border-2 border-gray-300 rounded-lg p-4 mb-4">
            <Text className="text-gray-800 text-lg font-bold mb-2">üìù Additional Notes</Text>
            <Text className="text-gray-700 text-base leading-relaxed">
              {card.additional_notes}
            </Text>
          </View>
        )}

        {/* QR Code Section */}
        <View className="bg-indigo-50 border-2 border-indigo-300 rounded-lg p-4 mb-4">
          <Text className="text-indigo-800 text-lg font-bold mb-3">üì± Digital Access</Text>
          
          {qrCodeUrl ? (
            <View className="items-center">
              <Image
                source={{ uri: qrCodeUrl }}
                style={{ width: 200, height: 200 }}
                className="rounded-lg mb-3"
              />
              <Text className="text-indigo-700 text-sm text-center mb-3">
                Scan this QR code to access emergency information on any device
              </Text>
            </View>
          ) : (
            <View className="items-center py-6">
              <Text className="text-indigo-700 text-base text-center mb-3">
                Generate a QR code for quick access to this emergency card
              </Text>
              <SafetyButton
                title="Generate QR Code"
                variant="secondary"
                size="md"
                onPress={handleGenerateQR}
                loading={generatingQR}
                icon="üì±"
              />
            </View>
          )}
        </View>

        {/* Card Info */}
        <View className="bg-gray-100 rounded-lg p-4 mb-6">
          <Text className="text-gray-600 text-sm text-center mb-1">
            Last Updated: {new Date(card.last_updated).toLocaleString()}
          </Text>
          <Text className="text-gray-600 text-sm text-center">
            Card Language: {card.card_language.toUpperCase()}
          </Text>
        </View>
      </ScrollView>

      {/* Action Buttons */}
      <View className="bg-white border-t border-gray-200 p-4">
        <View className="flex-row justify-around">
          <SafetyButton
            title="Share"
            variant="secondary"
            size="md"
            onPress={handleShare}
            icon="üì§"
            style={{ flex: 1, marginRight: 8 }}
          />
          
          {onEdit && (
            <SafetyButton
              title="Edit"
              variant="primary"
              size="md"
              onPress={onEdit}
              icon="‚úèÔ∏è"
              style={{ flex: 1, marginLeft: 8 }}
            />
          )}
        </View>
      </View>
    </View>
  )
}

export default EmergencyCardViewer