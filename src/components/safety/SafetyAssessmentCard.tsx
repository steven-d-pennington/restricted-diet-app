/**
 * Safety Assessment Card Component
 * 
 * SAFETY CRITICAL: Displays comprehensive restaurant safety information
 * for life-critical decision making
 */

import React from 'react'
import { View, Text, TouchableOpacity, Alert } from 'react-native'
import { Ionicons } from '@expo/vector-icons'
import { SafetyLevel, RestrictionSeverity } from '../../types/database.types'
import { RestaurantSafetyOverview } from '../../services/safetyAssessmentAPI'

interface SafetyAssessmentCardProps {\n  assessment: RestaurantSafetyOverview\n  onPress?: () => void\n  onRefresh?: () => void\n  showDetails?: boolean\n  restrictionName?: string\n  userSeverity?: RestrictionSeverity\n}\n\nconst SafetyAssessmentCard: React.FC<SafetyAssessmentCardProps> = ({\n  assessment,\n  onPress,\n  onRefresh,\n  showDetails = true,\n  restrictionName,\n  userSeverity\n}) => {\n  const getSafetyLevelColor = (level: SafetyLevel): string => {\n    switch (level) {\n      case 'safe': return '#10B981' // green-500\n      case 'caution': return '#F59E0B' // amber-500\n      case 'warning': return '#EF4444' // red-500\n      case 'danger': return '#DC2626' // red-600\n      default: return '#6B7280' // gray-500\n    }\n  }\n\n  const getSafetyLevelIcon = (level: SafetyLevel): string => {\n    switch (level) {\n      case 'safe': return 'checkmark-circle'\n      case 'caution': return 'warning'\n      case 'warning': return 'alert-circle'\n      case 'danger': return 'close-circle'\n      default: return 'help-circle'\n    }\n  }\n\n  const getSafetyLevelText = (level: SafetyLevel): string => {\n    switch (level) {\n      case 'safe': return 'Safe'\n      case 'caution': return 'Caution'\n      case 'warning': return 'Warning'\n      case 'danger': return 'DANGER'\n      default: return 'Unknown'\n    }\n  }\n\n  const getConfidenceText = (score: number): string => {\n    if (score >= 80) return 'High Confidence'\n    if (score >= 60) return 'Medium Confidence'\n    if (score >= 40) return 'Low Confidence'\n    return 'Very Low Confidence'\n  }\n\n  const getDataFreshnessText = (days: number): string => {\n    if (days <= 7) return 'Recent'\n    if (days <= 30) return 'Current'\n    if (days <= 90) return 'Aging'\n    return 'Outdated'\n  }\n\n  const handleCriticalWarningPress = () => {\n    if (assessment.critical_warnings.length > 0) {\n      Alert.alert(\n        'Critical Safety Warnings',\n        assessment.critical_warnings.join('\\n\\n'),\n        [{ text: 'Understood', style: 'default' }],\n        { cancelable: true }\n      )\n    }\n  }\n\n  const isLifeThreatening = userSeverity === 'life_threatening'\n  const hasExpertVerification = assessment.expert_verified\n  const isDataFresh = assessment.data_freshness_days <= 30\n  const hasHighConfidence = assessment.confidence_score >= 70\n\n  // Determine if this is a concerning assessment\n  const isConcerning = \n    assessment.safety_level === 'danger' ||\n    (assessment.safety_level === 'warning' && isLifeThreatening) ||\n    assessment.critical_warnings.length > 0 ||\n    (!hasHighConfidence && isLifeThreatening)\n\n  return (\n    <TouchableOpacity\n      onPress={onPress}\n      className={`mx-4 mb-4 rounded-xl p-4 shadow-lg ${\n        isConcerning ? 'bg-red-50 border-2 border-red-200' : 'bg-white border border-gray-200'\n      }`}\n    >\n      {/* Header with Safety Level */}\n      <View className=\"flex-row items-center justify-between mb-3\">\n        <View className=\"flex-row items-center\">\n          <Ionicons\n            name={getSafetyLevelIcon(assessment.safety_level) as any}\n            size={24}\n            color={getSafetyLevelColor(assessment.safety_level)}\n            style={{ marginRight: 8 }}\n          />\n          <Text\n            className=\"text-lg font-bold\"\n            style={{ color: getSafetyLevelColor(assessment.safety_level) }}\n          >\n            {getSafetyLevelText(assessment.safety_level)}\n          </Text>\n          {isLifeThreatening && (\n            <View className=\"ml-2 px-2 py-1 bg-red-100 rounded-full\">\n              <Text className=\"text-xs font-medium text-red-700\">LIFE-THREATENING</Text>\n            </View>\n          )}\n        </View>\n        \n        {onRefresh && (\n          <TouchableOpacity\n            onPress={onRefresh}\n            className=\"p-2 rounded-full bg-gray-100\"\n          >\n            <Ionicons name=\"refresh\" size={16} color=\"#6B7280\" />\n          </TouchableOpacity>\n        )}\n      </View>\n\n      {/* Critical Warnings */}\n      {assessment.critical_warnings.length > 0 && (\n        <TouchableOpacity\n          onPress={handleCriticalWarningPress}\n          className=\"mb-3 p-3 bg-red-100 border border-red-300 rounded-lg\"\n        >\n          <View className=\"flex-row items-center\">\n            <Ionicons name=\"warning\" size={20} color=\"#DC2626\" style={{ marginRight: 8 }} />\n            <Text className=\"flex-1 text-sm font-medium text-red-800\">\n              {assessment.critical_warnings.length} Critical Warning{assessment.critical_warnings.length > 1 ? 's' : ''}\n            </Text>\n            <Ionicons name=\"chevron-forward\" size={16} color=\"#DC2626\" />\n          </View>\n          <Text className=\"text-xs text-red-600 mt-1\">\n            Tap to view details\n          </Text>\n        </TouchableOpacity>\n      )}\n\n      {/* Safety Score */}\n      <View className=\"flex-row items-center justify-between mb-3\">\n        <View className=\"flex-1\">\n          <Text className=\"text-2xl font-bold text-gray-900\">\n            {assessment.overall_safety_score}/100\n          </Text>\n          <Text className=\"text-sm text-gray-600\">\n            Safety Score {restrictionName && `for ${restrictionName}`}\n          </Text>\n        </View>\n        \n        <View className=\"items-end\">\n          <Text className=\"text-sm font-medium text-gray-700\">\n            {getConfidenceText(assessment.confidence_score)}\n          </Text>\n          <Text className=\"text-xs text-gray-500\">\n            {assessment.confidence_score}% confidence\n          </Text>\n        </View>\n      </View>\n\n      {/* Verification Indicators */}\n      <View className=\"flex-row items-center mb-3 space-x-3\">\n        <View className=\"flex-row items-center\">\n          <Ionicons\n            name={hasExpertVerification ? 'checkmark-circle' : 'help-circle'}\n            size={16}\n            color={hasExpertVerification ? '#10B981' : '#6B7280'}\n            style={{ marginRight: 4 }}\n          />\n          <Text className={`text-xs ${\n            hasExpertVerification ? 'text-green-700' : 'text-gray-600'\n          }`}>\n            {hasExpertVerification ? 'Expert Verified' : 'No Expert Review'}\n          </Text>\n        </View>\n        \n        <View className=\"flex-row items-center\">\n          <Ionicons\n            name={isDataFresh ? 'time' : 'time-outline'}\n            size={16}\n            color={isDataFresh ? '#10B981' : '#F59E0B'}\n            style={{ marginRight: 4 }}\n          />\n          <Text className={`text-xs ${\n            isDataFresh ? 'text-green-700' : 'text-amber-600'\n          }`}>\n            {getDataFreshnessText(assessment.data_freshness_days)}\n          </Text>\n        </View>\n      </View>\n\n      {/* Restriction-Specific Scores */}\n      {showDetails && assessment.restriction_specific_scores.length > 0 && (\n        <View className=\"mt-3 pt-3 border-t border-gray-200\">\n          <Text className=\"text-sm font-medium text-gray-700 mb-2\">\n            Restriction-Specific Safety:\n          </Text>\n          {assessment.restriction_specific_scores.slice(0, 3).map((score, index) => (\n            <View key={score.restriction_id} className=\"flex-row items-center justify-between mb-1\">\n              <Text className=\"text-sm text-gray-600\">\n                {score.restriction_name}\n              </Text>\n              <View className=\"flex-row items-center\">\n                <Text className=\"text-sm font-medium text-gray-900 mr-2\">\n                  {score.safety_score}/100\n                </Text>\n                <Ionicons\n                  name={getSafetyLevelIcon(score.safety_level) as any}\n                  size={14}\n                  color={getSafetyLevelColor(score.safety_level)}\n                />\n              </View>\n            </View>\n          ))}\n          {assessment.restriction_specific_scores.length > 3 && (\n            <Text className=\"text-xs text-gray-500 mt-1\">\n              +{assessment.restriction_specific_scores.length - 3} more restrictions\n            </Text>\n          )}\n        </View>\n      )}\n\n      {/* Last Updated */}\n      <View className=\"mt-3 pt-2 border-t border-gray-100\">\n        <Text className=\"text-xs text-gray-500\">\n          Last updated: {new Date(assessment.last_updated).toLocaleDateString()} \n          ({assessment.data_freshness_days} days ago)\n        </Text>\n      </View>\n\n      {/* Life-Threatening Disclaimer */}\n      {isLifeThreatening && (\n        <View className=\"mt-3 p-2 bg-red-50 border border-red-200 rounded\">\n          <Text className=\"text-xs text-red-700 text-center\">\n            ⚠️ Life-threatening allergy: Always verify with restaurant staff regardless of safety score\n          </Text>\n        </View>\n      )}\n    </TouchableOpacity>\n  )\n}\n\nexport default SafetyAssessmentCard"